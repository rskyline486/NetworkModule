#include "stdafx.h"
#include "CryptoCore.h"

//////////////////////////////////////////////////////////////////////////
//发送映射
const BYTE g_CryptoSendByteMap[256] =
{
	0x70,0x2F,0x40,0x5F,0x44,0x8E,0x6E,0x45,0x7E,0xAB,0x2C,0x1F,0xB4,0xAC,0x9D,0x91,
	0x0D,0x36,0x9B,0x0B,0xD4,0xC4,0x39,0x74,0xBF,0x23,0x16,0x14,0x06,0xEB,0x04,0x3E,
	0x12,0x5C,0x8B,0xBC,0x61,0x63,0xF6,0xA5,0xE1,0x65,0xD8,0xF5,0x5A,0x07,0xF0,0x13,
	0xF2,0x20,0x6B,0x4A,0x24,0x59,0x89,0x64,0xD7,0x42,0x6A,0x5E,0x3D,0x0A,0x77,0xE0,
	0x80,0x27,0xB8,0xC5,0x8C,0x0E,0xFA,0x8A,0xD5,0x29,0x56,0x57,0x6C,0x53,0x67,0x41,
	0xE8,0x00,0x1A,0xCE,0x86,0x83,0xB0,0x22,0x28,0x4D,0x3F,0x26,0x46,0x4F,0x6F,0x2B,
	0x72,0x3A,0xF1,0x8D,0x97,0x95,0x49,0x84,0xE5,0xE3,0x79,0x8F,0x51,0x10,0xA8,0x82,
	0xC6,0xDD,0xFF,0xFC,0xE4,0xCF,0xB3,0x09,0x5D,0xEA,0x9C,0x34,0xF9,0x17,0x9F,0xDA,
	0x87,0xF8,0x15,0x05,0x3C,0xD3,0xA4,0x85,0x2E,0xFB,0xEE,0x47,0x3B,0xEF,0x37,0x7F,
	0x93,0xAF,0x69,0x0C,0x71,0x31,0xDE,0x21,0x75,0xA0,0xAA,0xBA,0x7C,0x38,0x02,0xB7,
	0x81,0x01,0xFD,0xE7,0x1D,0xCC,0xCD,0xBD,0x1B,0x7A,0x2A,0xAD,0x66,0xBE,0x55,0x33,
	0x03,0xDB,0x88,0xB2,0x1E,0x4E,0xB9,0xE6,0xC2,0xF7,0xCB,0x7D,0xC9,0x62,0xC3,0xA6,
	0xDC,0xA7,0x50,0xB5,0x4B,0x94,0xC0,0x92,0x4C,0x11,0x5B,0x78,0xD9,0xB1,0xED,0x19,
	0xE9,0xA1,0x1C,0xB6,0x32,0x99,0xA3,0x76,0x9E,0x7B,0x6D,0x9A,0x30,0xD6,0xA9,0x25,
	0xC7,0xAE,0x96,0x35,0xD0,0xBB,0xD2,0xC8,0xA2,0x08,0xF3,0xD1,0x73,0xF4,0x48,0x2D,
	0x90,0xCA,0xE2,0x58,0xC1,0x18,0x52,0xFE,0xDF,0x68,0x98,0x54,0xEC,0x60,0x43,0x0F
};

//接收映射
const BYTE g_CryptoRecvByteMap[256] =
{
	0x51,0xA1,0x9E,0xB0,0x1E,0x83,0x1C,0x2D,0xE9,0x77,0x3D,0x13,0x93,0x10,0x45,0xFF,
	0x6D,0xC9,0x20,0x2F,0x1B,0x82,0x1A,0x7D,0xF5,0xCF,0x52,0xA8,0xD2,0xA4,0xB4,0x0B,
	0x31,0x97,0x57,0x19,0x34,0xDF,0x5B,0x41,0x58,0x49,0xAA,0x5F,0x0A,0xEF,0x88,0x01,
	0xDC,0x95,0xD4,0xAF,0x7B,0xE3,0x11,0x8E,0x9D,0x16,0x61,0x8C,0x84,0x3C,0x1F,0x5A,
	0x02,0x4F,0x39,0xFE,0x04,0x07,0x5C,0x8B,0xEE,0x66,0x33,0xC4,0xC8,0x59,0xB5,0x5D,
	0xC2,0x6C,0xF6,0x4D,0xFB,0xAE,0x4A,0x4B,0xF3,0x35,0x2C,0xCA,0x21,0x78,0x3B,0x03,
	0xFD,0x24,0xBD,0x25,0x37,0x29,0xAC,0x4E,0xF9,0x92,0x3A,0x32,0x4C,0xDA,0x06,0x5E,
	0x00,0x94,0x60,0xEC,0x17,0x98,0xD7,0x3E,0xCB,0x6A,0xA9,0xD9,0x9C,0xBB,0x08,0x8F,
	0x40,0xA0,0x6F,0x55,0x67,0x87,0x54,0x80,0xB2,0x36,0x47,0x22,0x44,0x63,0x05,0x6B,
	0xF0,0x0F,0xC7,0x90,0xC5,0x65,0xE2,0x64,0xFA,0xD5,0xDB,0x12,0x7A,0x0E,0xD8,0x7E,
	0x99,0xD1,0xE8,0xD6,0x86,0x27,0xBF,0xC1,0x6E,0xDE,0x9A,0x09,0x0D,0xAB,0xE1,0x91,
	0x56,0xCD,0xB3,0x76,0x0C,0xC3,0xD3,0x9F,0x42,0xB6,0x9B,0xE5,0x23,0xA7,0xAD,0x18,
	0xC6,0xF4,0xB8,0xBE,0x15,0x43,0x70,0xE0,0xE7,0xBC,0xF1,0xBA,0xA5,0xA6,0x53,0x75,
	0xE4,0xEB,0xE6,0x85,0x14,0x48,0xDD,0x38,0x2A,0xCC,0x7F,0xB1,0xC0,0x71,0x96,0xF8,
	0x3F,0x28,0xF2,0x69,0x74,0x68,0xB7,0xA3,0x50,0xD0,0x79,0x1D,0xFC,0xCE,0x8A,0x8D,
	0x2E,0x62,0x30,0xEA,0xED,0x2B,0x26,0xB9,0x81,0x7C,0x46,0x89,0x73,0xA2,0xF7,0x72
};

//////////////////////////////////////////////////////////////////////////

//构造函数
CCrypto::CCrypto()
{
}

//析构函数
CCrypto::~CCrypto()
{
}

//加密数据
bool CCrypto::Encrypt(WORD wMainCmdID, WORD wSubCmdID, VOID * pData, WORD wDataSize, tagEncryptData& EncryptData)
{
	//校验数据 
	if ((wDataSize + sizeof(NT_Head)) > SOCKET_BUFFER) return false;

	//变量定义
	NT_Head * pHead = (NT_Head *)m_cbDataBuffer;

	//设置包头
	pHead->NTInfo.cbDataKind = 0;
	pHead->NTInfo.cbCheckCode = 0;
	pHead->NTInfo.wPacketSize = sizeof(NT_Head) + wDataSize;

	//设置命令
	pHead->CommandInfo.wMainCmdID = wMainCmdID;
	pHead->CommandInfo.wSubCmdID = wSubCmdID;

	//设置数据
	if (wDataSize > 0)
	{
		m_wDataSize = sizeof(NT_Head) + wDataSize;
		CopyMemory(m_cbDataBuffer + sizeof(NT_Head), pData, wDataSize);
	}
	else
	{
		m_wDataSize = sizeof(NT_Head);
	}

	//映射数据
	if (MappedBuffer() == false) return false;
	//加密数据
	if (EncryptBuffer() == false) return false;
	//压缩数据
	if (CompressBuffer() == false) return false;

	//设置数据
	EncryptData.wDataSize = m_wDataSize;
	EncryptData.pDataBuffer = m_cbDataBuffer;

	return true;
}

//解密数据
bool CCrypto::Decrypt(VOID * pData, WORD wDataSize, tagDecryptData& DecryptData)
{
	//校验数据 
	if (wDataSize <= sizeof(NT_Info) || (wDataSize > SOCKET_BUFFER)) return false;

	//设置数据
	m_wDataSize = wDataSize;
	CopyMemory(m_cbDataBuffer, pData, wDataSize);

	//校验数据
	if (((NT_Info *)m_cbDataBuffer)->wPacketSize != wDataSize) return false;

	//解压数据
	if (UnCompressBuffer() == false) return false;
	//解密数据
	if (DecryptBuffer() == false) return false;
	//映射数据
	if (UnMappedBuffer() == false) return false;

	//变量定义
	NT_Head * pHead = (NT_Head *)m_cbDataBuffer;

	//设置数据(wDataSize为除了Command之后的大小)
	//DecryptData.Command = pHead->CommandInfo;
	//DecryptData.wDataSize = m_wDataSize - sizeof(NT_Head);
	//DecryptData.pDataBuffer = m_cbDataBuffer + sizeof(NT_Head);

	//设置数据(wDataSize为包含Command的大小)
	DecryptData.Command = pHead->CommandInfo;
	DecryptData.wDataSize = m_wDataSize - sizeof(NT_Info);
	DecryptData.pDataBuffer = m_cbDataBuffer + sizeof(NT_Info);

	return true;
}

//映射数据
bool CCrypto::MappedBuffer()
{
	//变量定义
	BYTE cbCheckCode = 0;
	NT_Info * pInfo = (NT_Info *)m_cbDataBuffer;

	//字节映射
	for (WORD i = sizeof(NT_Info); i < m_wDataSize; i++)
	{
		cbCheckCode += m_cbDataBuffer[i];
		m_cbDataBuffer[i] = g_CryptoSendByteMap[m_cbDataBuffer[i]];
	}

	//设置包头
	pInfo->cbDataKind |= DK_MAPPED;
	pInfo->cbCheckCode = ~cbCheckCode + 1;

	return true;
}

//映射数据
bool CCrypto::UnMappedBuffer()
{
	//校验数据
	if (m_wDataSize < sizeof(NT_Head)) return false;
	if (((NT_Head *)m_cbDataBuffer)->NTInfo.wPacketSize != m_wDataSize) return false;

	//变量定义
	NT_Info * pInfo = (NT_Info *)m_cbDataBuffer;

	//映射数据
	if ((pInfo->cbDataKind&DK_MAPPED) != 0)
	{
		//变量定义
		BYTE cbCheckCode = pInfo->cbCheckCode;

		//校验字节
		for (INT i = sizeof(NT_Info); i < m_wDataSize; i++)
		{
			cbCheckCode += g_CryptoRecvByteMap[m_cbDataBuffer[i]];
			m_cbDataBuffer[i] = g_CryptoRecvByteMap[m_cbDataBuffer[i]];
		}

		//结果判断
		if (cbCheckCode != 0) return false;
	}

	return true;
}

//加密数据
bool CCrypto::EncryptBuffer()
{
	return true;
}

//解密数据
bool CCrypto::DecryptBuffer()
{
	return true;
}

//压缩数据
bool CCrypto::CompressBuffer()
{
	return true;
}

//解压数据
bool CCrypto::UnCompressBuffer()
{
	return true;
}

//////////////////////////////////////////////////////////////////////////

//构造函数
CCryptoManager::CCryptoManager()
{
}

//析构函数
CCryptoManager::~CCryptoManager()
{
	Release();
}

//初始化管理对象
bool CCryptoManager::Init()
{
	return true;
}

//释放管理对象
bool CCryptoManager::Release()
{
	//释放对象
	for (WORD i = 0; i < m_CryptoPtrStorageList.size(); i++)
	{
		delete m_CryptoPtrStorageList[i];
		m_CryptoPtrStorageList[i] = NULL;
	}
	m_CryptoPtrStorageList.clear();

	//清空列表
	m_CryptoPtrActiveList.clear();

	return true;
}

//获取对象
CCrypto * CCryptoManager::PopCrypto()
{
	//同步控制
	CLocker Locker(m_Mutex);

	//对象定义
	CCrypto * pCrypto = NULL;
	if (m_CryptoPtrActiveList.size() > 0)
	{
		//取出最后一个对象
		WORD wBackIndex = (WORD)m_CryptoPtrActiveList.size() - 1;
		pCrypto = m_CryptoPtrActiveList[wBackIndex];
		m_CryptoPtrActiveList.pop_back();

		return pCrypto;
	}

	//申请对象
	pCrypto = new(std::nothrow) CCrypto();
	if (pCrypto)
	{
		//存储对象(管理指针)
		m_CryptoPtrStorageList.push_back(pCrypto);
	}

	return pCrypto;
}

//添加对象
void CCryptoManager::PushCrypto(CCrypto * pCrypto)
{
	//数据校验
	if (pCrypto == NULL)
	{
		Logger_Info(TEXT("归还加密对象异常,对象为空"));
		return;
	}

	//同步控制
	CLocker Locker(m_Mutex);

	//添加对象
	m_CryptoPtrActiveList.push_back(pCrypto);
}

//////////////////////////////////////////////////////////////////////////

//构造函数
CCryptoHelper::CCryptoHelper(CCryptoManager& CryptoManager) : m_CryptoManager(CryptoManager)
{
	//获取加密对象
	m_pCrypto = m_CryptoManager.PopCrypto();
}

//析构函数
CCryptoHelper::~CCryptoHelper(void)
{
	//归还加密对象
	m_CryptoManager.PushCrypto(m_pCrypto);
}

//加密数据
bool CCryptoHelper::Encrypt(WORD wMainCmdID, WORD wSubCmdID, VOID * pData, WORD wDataSize, tagEncryptData& EncryptData)
{
	//对象校验
	if (m_pCrypto == NULL)
	{
		Logger_Error(TEXT("加密数据=>获取加密对象失败,wMainCmdID:%u,wSubCmdID:%u,wDataSize:%u"), wMainCmdID, wSubCmdID, wDataSize);
		return false;
	}

	//加密数据
	if (m_pCrypto->Encrypt(wMainCmdID, wSubCmdID, pData, wDataSize, EncryptData) == false)
	{
		Logger_Error(TEXT("加密数据=>加密数据失败,wMainCmdID:%u,wSubCmdID:%u,wDataSize:%u"), wMainCmdID, wSubCmdID, wDataSize);
		return false;
	}

	return true;
}

//解密数据
bool CCryptoHelper::Decrypt(VOID * pData, WORD wDataSize, tagDecryptData& DecryptData)
{
	//对象校验
	if (m_pCrypto == NULL)
	{
		Logger_Error(TEXT("解密数据=>获取解密对象失败,wDataSize:%u"), wDataSize);
		return false;
	}

	//加密数据
	if (m_pCrypto->Decrypt(pData, wDataSize, DecryptData) == false)
	{
		Logger_Error(TEXT("解密数据=>解密数据失败,wDataSize:%u"), wDataSize);
		return false;
	}

	return true;
}

//////////////////////////////////////////////////////////////////////////